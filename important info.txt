What does it mean when a cout is ambiguous?
Ambiguity means there are multiple references to the same keyword: either two libraries have been included that have a cout fuction, or sometimes something gets messy in temporary compiled files. If you think your includes are okay, then cleaning your project or restarting might help.





vector<int> adj[]:
int size = sizeof(adj[front]) / sizeof(adj[0]);
The adj is an array of vectors, and adj[front] is a vector. However, sizeof(adj[front]) will not give you the size of the vector correctly. Instead, you should use the size() member function of the vector to get its size.
array=adj[2,5,3,7]   array=[vector1,vector2...]
vector=adj[2],adj[5]...

vector<vector<int>> adj[]
array= adj[3,7,4,6] 
vector= a={{3,4},{3,6},{2,5}}
	b={{4,7},{6,7}}
vector<vector<int>> adj[] to vector<pair<int,pair<int,int>>>edges:
vector<pair<int,pair<int,int>>>edges;
       	for(int i=0;i<V;i++){
            for(auto it:adj[i]){
                int u=i;
                int v=it[0];
                int wt=it[1];
                edges.push_back({wt,{u,v}});
            }
       	}

        








stoi,stoll



next_permutation(s.begin(),s.end());


long long S=accumulate(A.begin(),A.end(),0LL);






array:
count += upper_bound(matrix[i], matrix[i] + n, mid) - matrix[i];








The time complexity to find the size of a std::map is constant time or O(1).

In C++, the std::map class provides a member function size() that returns the number of elements in the map. This function retrieves the stored size from an internal variable, which is updated whenever elements are inserted or erased from the map. Therefore, the size() function can directly return the stored size in constant time, regardless of the number of elements present in the map.










If you use cout << (double)(1) / 0; in C++ code, it will result in a special floating-point value called "infinity" or "INF". This occurs because you are dividing a nonzero number by zero, which in floating-point arithmetic is defined as positive or negative infinity depending on the sign of the numerator.





In this corrected code, the left-shift operation in long long a is corrected to (1LL << i). The 1LL represents a long long integer with the value 1, and it is left-shifted by i bits.




// Allocate dynamic memory for the vector
    int* dynamicArray = new int[size];

    // Assign the dynamic memory to a vector
    std::vector<int> myVector(dynamicArray, dynamicArray + size);








def power(self,N,R):  
        M = 1000000007
        return pow(N,R,M)









Topological sort(is kahn's algo is better then another algo?)
Kahn's algorithm and other algorithms for topological sorting serve different purposes and have different characteristics, so it is difficult to say definitively that one is universally better than the other. The choice of algorithm depends on various factors, such as the specific requirements of the problem and the characteristics of the input graph.

Kahn's algorithm is a popular and widely used algorithm for topological sorting. It works based on the concept of indegrees, where it repeatedly selects nodes with zero indegree (i.e., nodes that have no incoming edges) and removes them from the graph, updating the indegrees of the remaining nodes. This process continues until all nodes have been processed, resulting in a valid topological ordering if the graph is a directed acyclic graph (DAG).

One advantage of Kahn's algorithm is that it is simple to understand and implement. It has a time complexity of O(V + E), where V is the number of vertices and E is the number of edges in the graph. This makes it efficient for many practical scenarios.

However, there are other algorithms for topological sorting as well, such as depth-first search (DFS) based algorithms like the one based on recursive DFS or the iterative DFS algorithm called the "stack-based" algorithm. These algorithms may have different time complexities and performance characteristics depending on the graph's structure.

In some cases, DFS-based algorithms may be more suitable, especially when the graph is sparse or when you need to explore specific paths or perform additional operations during the traversal. DFS-based algorithms can also be used to detect cycles in the graph, which Kahn's algorithm does not do explicitly.

In summary, there is no one-size-fits-all answer to whether Kahn's algorithm is better than other algorithms for topological sorting. The choice depends on the specific requirements and characteristics of the problem at hand. Both Kahn's algorithm and DFS-based algorithms have their own advantages and trade-offs, and the most suitable algorithm will vary from case to case.





Bit
ans += 1 << i: This statement adds the value obtained from shifting 1 left by i positions to the variable ans. It effectively sets the i-th bit of ans to 1.
For example, suppose ans is initially 0 (00000000). If you execute ans += 1 << 3, it will set the 3rd bit to 1, resulting in 00001000, which is 8 in decimal.
#include <iostream>

int main() {
    int ans = 0;

    // Set the 0th, 2nd, and 5th bits to 1
    ans += 1 << 0;  // Set 0th bit to 1
    ans += 1 << 2;  // Set 2nd bit to 1
    ans += 1 << 5;  // Set 5th bit to 1

    std::cout << "Result: " << ans << std::endl;

    return 0;
}










if (s[i] == " " && c > 0) return c; //error
By using single quotes (' ') instead of double quotes (" "), you are now comparing the character s[i] against the character literal for a space, which is valid and eliminates the warning.










fmod(x, 1) calculates the remainder when x is divided by 1. It returns the fractional part of x. In this case, x is the logarithm of n to the base 3.

The expression fmod(x, 1) calculates the fractional part of a number x. The fmod function is part of the <cmath> library in C++, and it returns the remainder when x is divided by 1.

In mathematical terms, if x is a real number, fmod(x, 1) gives you the decimal part of x. It effectively removes the whole number part of x and returns the fractional part.

For example:

fmod(5.7, 1) would return 0.7 because the integer part of 5.7 is 5, and the remainder is the fractional part.
fmod(-3.2, 1) would return -0.2 because the integer part of -3.2 is -3, and the remainder is the fractional part.
The result of fmod(x, 1) is always between 0 and 1 (excluding 1). If the fractional part is exactly 0, it means that x is an integer. If the fractional part is non-zero, it means that x is not an integer.

It's worth noting that when x is an integer, fmod(x, 1) will always return 0.0.













Floyd's Tortoise and Hare algorithm:
The given code implements the Floyd's Tortoise and Hare algorithm to find the duplicate element in a vector of integers (`nums`). This algorithm is an efficient approach for detecting cycles in a linked list, but it can also be used to find duplicate elements in an array.

Here's how the code works:

1. Initialize two pointers, `tortoise` and `hare`, both pointing to the first element of the vector (`nums[0]`).

2. In the first loop, the `tortoise` moves one step at a time (`nums[tortoise]`), while the `hare` moves two steps at a time (`nums[nums[hare]]`). The loop continues until the `tortoise` and `hare` pointers meet at the same element.

   This loop guarantees that the `tortoise` and `hare` will eventually meet if there is a cycle in the vector. The cycle occurs when the duplicate element is encountered.

3. Once the `tortoise` and `hare` meet, it means there is a cycle. At this point, we reset the `hare` pointer to the first element of the vector (`nums[0]`).

4. In the second loop, both the `tortoise` and `hare` pointers move one step at a time. The `tortoise` starts from the point where the two pointers met, and the `hare` starts from the beginning of the vector. The loop continues until the `tortoise` and `hare` pointers meet again.

   This loop guarantees that the `tortoise` and `hare` will meet at the duplicate element in the vector. By the time they meet again, the `tortoise` would have made one full cycle, and the `hare` would have caught up with it.

5. Finally, we return the value of either the `tortoise` or `hare` pointer, as they both point to the duplicate element in the vector.

The time complexity of this algorithm is O(n), where n is the number of elements in the vector. This is because both loops iterate through the elements at most once. The space complexity is O(1) since the algorithm only uses a constant amount of extra space to store the `tortoise` and `hare` pointers.











vector<int> numbers = {1, 2, 3, 3, 4, 5};
int valueToRemove = 3;
auto newEnd = remove(numbers.begin(), numbers.end(), valueToRemove);
numbers.erase(newEnd, numbers.end());

After executing this code, the vector numbers will contain {1, 2, 4, 5}, with the value 3 removed. The erase function is responsible for actually removing the elements from the vector based on the new end iterator returned by remove.

Note that remove does not actually reduce the size of the vector. It only moves the elements to the end of the range. To permanently remove the excess elements, you need to call erase on the vector.

Using std::remove(), the first call will move all the elements that are not equal to 3 towards the beginning of the vector. The returned iterator will point to the new logical end of the modified vector. The subsequent call to erase() will remove the elements from the returned iterator to the end of the vector.










class Solution {
public:
int ans=0;
    int maxSumDivThree(vector<int>& nums) {
        vector<int>dp(3,0);
        for(auto a:nums){
            for(int i:vector<int>(dp)){
                dp[(i+a)%3]=max(dp[(i+a)%3],i+a);
            }
        }
       return dp[0];
    }
};

















So, the line vector<int> adj[n]; declares an array named adj that consists of n vectors, each capable of holding integers.

You can access individual vectors in the array using array indexing. For example, adj[0] refers to the first vector, adj[1] refers to the second vector, and so on.
















In this code if we do change in vector inside second for loop in middle of loop so does it change the vector inside  for(int i:vector<int>(dp)) this condition?

No, modifying the vector `dp` inside the second for loop will not affect the iteration of the loop `for(int i : vector<int>(dp))`. The reason is that the range-based for loop creates a copy of the vector `dp` at the beginning of the loop and iterates over that copy.

When the loop `for(int i : vector<int>(dp))` is executed, it creates a temporary copy of the vector `dp` using `vector<int>(dp)`. This temporary copy is used for the iteration, and any modifications made to the original vector `dp` within the loop will not be reflected in the iteration because the loop operates on the copy.

Therefore, modifying the vector `dp` inside the second for loop will only affect subsequent iterations of the loop and will not have any impact on the current iteration or the elements being accessed during that iteration.














why ((1 << i) & n) == 1 is not work:
The condition ((1 << i) & n) == 1 does not work as expected because it checks if the result of the bitwise AND operation between (1 << i) and n is equal to 1. However, the result of the bitwise AND operation can be any number that has the ith bit set (either 0 or a power of 2).

To correctly check if the ith bit is set (equal to 1), you should modify the condition to check if the result is non-zero:











In an unordered_map<int>, if you try to access an element using the square bracket operator ([]) and the key does not exist in the map, a new element with that key will be inserted into the map. For unordered_map<int>, the default value of the element will depend on the value type associated with the key.

If the value type is a primitive type (e.g., int, double, bool), the default value will be the default-initialized value for that type. For int, it will be 0. If the value type is a class type, the default constructor of the class will be called to initialize the value.

For example, if you have an unordered_map<int, int>, the default value for the int value type will be 0. Similarly, for an unordered_map<int, std::string>, the default value for the std::string value type will be an empty string ("").

In the case of unordered_map<int> map;, since no explicit value type is specified, it will use the default value type, which is std::pair<const int, int>. The default value for the int value type will be 0, so the default value for map[6] will be 0.





